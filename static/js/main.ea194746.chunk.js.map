{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","WinSquare","style","color","Board","i","this","squares","winningSquares","rows","j","includes","push","renderWinSquare","renderSquare","createSquares","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","clicks","ascending","slice","length","location","calculateWinner","setState","concat","step","status","current","result","winner","moves","map","move","loc","row","Math","floor","desc","jumpTo","reverse","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea194746.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction WinSquare(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n        <span style={{color: \"green\"}}>{props.value}</span>\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n    return (\r\n        <Square\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n            key={i}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderWinSquare(i) {\r\n        return (\r\n        <WinSquare\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n            key={i}\r\n            />\r\n        );\r\n    }\r\n\r\n    createSquares(winningSquares) {\r\n        let rows = [];\r\n        for(let i = 0; i < 3; i++){\r\n          let squares = [];\r\n          for(let j = 0; j < 3; j++){\r\n              if (winningSquares && winningSquares.includes(3*i+j)){\r\n                  squares.push(this.renderWinSquare(3*i+j));\r\n              } else {\r\n                  squares.push(this.renderSquare(3 * i + j));\r\n              }\r\n          }\r\n        rows.push(<div className=\"board-row\" key={i}>{squares}</div>);\r\n      }\r\n      return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n              {this.createSquares(this.props.winningSquares)}\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        history: [{\r\n            squares: Array(9).fill(null),\r\n        }],\r\n        xIsNext: true,\r\n        stepNumber: 0,\r\n        clicks: [],\r\n        ascending:true,\r\n    };\r\n  }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length -1];\r\n        const squares = current.squares.slice();\r\n        const location = this.state.clicks.slice(0, this.state.stepNumber);\r\n\r\n        // If not a winner yet, check if theres a winner\r\n        if (calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        location.push(i);\r\n        this.setState({\r\n            history: history.concat([{\r\n            squares: squares,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            clicks: location\r\n        });\r\n\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n          stepNumber: step,\r\n          xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const result = calculateWinner(current.squares);\r\n        const winner = result ? result[0] : result\r\n        const winningSquares = result ? result.slice(1) : result\r\n\r\n        const moves = history.map((step, move, history) => {\r\n            const loc = this.state.clicks[move-1];\r\n            const row = Math.floor(loc / 3) + 1;\r\n            const col = loc % 3 + 1;\r\n            const desc = move ? 'Go to move #' + move + ' (' + row + ', ' + col + ') '  : 'Go to game start';\r\n            if (move === this.state.stepNumber) {\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}> <b>{desc}</b> </button>\r\n                    </li>\r\n                )\r\n            }\r\n            return (\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}> {desc} </button>\r\n                    </li>\r\n                )\r\n\r\n        });\r\n\r\n        if (!this.state.ascending){\r\n            moves.reverse()\r\n        }\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else if (this.state.stepNumber === 9) {\r\n            status = 'Its a draw, yall suck at tic-tac-toe';\r\n        }\r\n        else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div><h1>TIC TAC TOE</h1>\r\n          <div className=\"game\">\r\n            <div className=\"game-board\">\r\n              <Board\r\n                  squares={current.squares}\r\n                  winningSquares={winningSquares}\r\n                  onClick={(i) => this.handleClick(i)}/>\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <button onClick={() => (this.setState({ascending: !this.state.ascending}))}>\r\n                Toggle Order: {(this.state.ascending ? 'ascending' : 'descending')}</button>\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n          </div></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [squares[a], a, b, c];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}